{"version":3,"sources":["types.js","App.js","actions/Index.js","Reducers/Index.js","reportWebVitals.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDER","App","state","text","date","Date","render_Reminders","reminders","props","className","map","reminder","moment","fromNow","onClick","remove_Reminder","id","src","type","value","this","placeholder","onChange","e","setState","target","selected","showTimeSelect","dateFormat","style","display","width","add_Reminder","length","clear_Reminder","Component","connect","Reminders","action","Math","random","console","log","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAAaA,EAAe,eACfC,EAAkB,kBAClBC,EAAiB,iB,+DCOxBC,E,4MAEJC,MAAM,CACJC,KAAM,GACNC,KAAK,IAAIC,M,EAGXC,iBAAmB,WACjB,IAAOC,EAAa,EAAKC,MAAlBD,UACP,OACE,oBAAIE,UAAU,aAAd,SACGF,EAAUG,KAAI,SAACC,GACd,OACE,qBAA2BF,UAAU,kBAArC,UACE,sBAAKA,UAAU,gBAAf,UACI,6BAAKE,EAASR,OACd,4BAAIS,IAAO,IAAIP,KAAKM,EAASP,OAAOS,eAExC,qBAAKJ,UAAU,wBAAwBK,QAAS,kBAAM,EAAKN,MAAMO,gBAAgBJ,EAASK,KAA1F,iBALOL,EAASR,KAAKa,U,4CAajC,WAAS,IAAD,OACN,OACE,sBAAKP,UAAU,MAAf,UACE,qBAAKQ,IAAI,iBACT,qBAAKR,UAAU,iBAAf,SACE,sDAGF,uBACIA,UAAU,QACVS,KAAK,OACLC,MAASC,KAAKlB,MAAMC,KACpBkB,YAAY,8BACZC,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACrB,KAAKoB,EAAEE,OAAON,WAEhD,cAAC,IAAD,CACEO,SAAUN,KAAKlB,MAAME,KACrBuB,gBAAc,EACdC,WAAW,KACXT,MAAOC,KAAKlB,MAAME,KAClBK,UAAU,QACVa,SAAU,SAAClB,GAAD,OAAU,EAAKoB,SAAS,CAACpB,YAIvC,wBACIyB,MAAO,CAACC,QAAQ,QAASC,MAAM,QAC/BtB,UAAU,mBACVK,QAAU,WACJ,EAAKN,MAAMwB,aAAa,EAAK9B,MAAMC,KAAO,EAAKD,MAAME,MACrD,EAAKoB,SAAS,CAACrB,KAAK,GAAKC,KAAK,MALxC,4BAYCgB,KAAKd,mBAELc,KAAKZ,MAAMD,UAAU0B,OAAS,GAC7B,wBACIJ,MAAO,CAACC,QAAQ,QAASC,MAAM,QAC/BtB,UAAU,kBACVK,QAAU,kBAAM,EAAKN,MAAM0B,kBAH/B,8B,GAlEQC,aA6FHC,eAAS,SAAClC,GAAW,MAAO,CAACK,UAAUL,KAAU,CAAC8B,aCpGrC,SAAC7B,EAAOC,GAMhC,MALe,CACXc,KAAOpB,EACPK,OACAC,SDgGwEW,gBCzFjD,SAACC,GAK5B,MAJe,CACXE,KAAOnB,EACPiB,ODsF0FkB,eCjFpE,WAK1B,MAJe,CACXhB,KAAOlB,KD+EAoC,CAAoGnC,G,gBE9EpGoC,EAtBG,WAAwB,IAAvBnC,EAAsB,uDAAhB,GAAKoC,EAAW,uCACjC/B,EAAY,KAEhB,OAAG+B,EAAOpB,OAASpB,GACfS,EAAS,sBAAOL,GAAP,CAAe,CAACC,KAAKmC,EAAOnC,KAAOC,KAAKkC,EAAOlC,KAAOY,GAAGuB,KAAKC,YACvEC,QAAQC,IAAI,eAAiBnC,GACtBA,GAEH+B,EAAOpB,OAASnB,EACpBQ,EAAYL,EAAMyC,QAAO,SAAAhC,GAAQ,OAAIA,EAASK,KAAOsB,EAAOtB,MAEvDsB,EAAOpB,OAASlB,EACrBO,EAAY,GAKLL,GCPA0C,G,cAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCKRQ,EAAQC,YAAY/C,GAE1BgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SAG1Bf,K","file":"static/js/main.82f3f620.chunk.js","sourcesContent":["export const ADD_REMINDER = \"ADD_REMINDER\"\r\nexport const REMOVE_REMINDER = \"REMOVE_REMINDER\"\r\nexport const CLEAR_REMINDER = \"CLEAR_REMINDER\"\r\n","import React , { Component } from 'react';\nimport { add_Reminder ,remove_Reminder , clear_Reminder } from './actions/Index';\nimport {connect} from 'react-redux';\nimport moment from 'moment';\nimport DatePicker from \"react-datepicker\"\nimport \"react-datepicker/dist/react-datepicker.css\"\n\nimport './App.css';\n\nclass App extends Component{\n\n  state={\n    text: \"\",\n    date:new Date()\n  }\n\n  render_Reminders = () =>{\n    const {reminders} = this.props\n    return (\n      <ul className=\"list-group\">\n       { reminders.map((reminder) => {\n          return (\n            <li key={reminder.text.id} className=\"list-group-item\">\n              <div className=\"reminder-data\">\n                  <h2>{reminder.text}</h2>\n                  <p>{moment(new Date(reminder.date)).fromNow()}</p>\n              </div>\n              <div className=\"remove btn btn-danger\" onClick={() => this.props.remove_Reminder(reminder.id)}>X</div>\n            </li>\n          )\n        })}\n      </ul>\n    )\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <img src=\"reminder.jpg\"/>\n        <div className=\"reminder-title\">\n          <h2>What Should U Do ?</h2>\n        </div>\n\n        <input \n            className=\"input\" \n            type=\"text\" \n            value = {this.state.text}\n            placeholder=\"Enter What You Think .... ?\"\n            onChange={(e) => this.setState({text:e.target.value})}\n        />\n          <DatePicker\n            selected={this.state.date}\n            showTimeSelect\n            dateFormat=\"Pp\"\n            value={this.state.date}\n            className=\"input\" \n            onChange={(date) => this.setState({date})} //only when value has changed\n        />\n\n       \n        <button \n            style={{display:'block', width:'100%'}} \n            className=\"btn btn-primary \"\n            onClick={ () => {\n                  this.props.add_Reminder(this.state.text , this.state.date)\n                  this.setState({text:\"\" , date:\"\"})\n              }\n            }\n            >\n            Add Reminder..\n        </button>\n\n        {this.render_Reminders()}\n\n        {this.props.reminders.length > 0 && \n          <button \n              style={{display:'block', width:'100%'}} \n              className=\"btn btn-danger \"\n              onClick={ () => this.props.clear_Reminder()}\n              >\n              Clear All\n          </button>\n        }\n\n\n      </div>\n    );\n    }\n}\n\n// function mapDispatchtoProps(dispatch){\n//   return {\n//     add_Reminder:() => dispatch(add_Reminder())\n//   }\n// }\n\n// function mapStateToProps(state){\n//   return {\n//     reminders :state\n//   }\n// }\n\nexport default connect( (state) => {return {reminders:state}} , {add_Reminder , remove_Reminder , clear_Reminder})(App);\n","import { ADD_REMINDER , REMOVE_REMINDER , CLEAR_REMINDER } from \"../types\";\r\n\r\nexport const add_Reminder = (text , date) =>{\r\n    const action = {\r\n        type : ADD_REMINDER,\r\n        text,\r\n        date\r\n    }\r\n    return action\r\n}\r\n\r\n\r\n\r\nexport const remove_Reminder = (id) => {\r\n    const action = {\r\n        type : REMOVE_REMINDER,\r\n        id\r\n    }\r\n    return action\r\n}\r\n\r\nexport const clear_Reminder = () => {\r\n    const action = {\r\n        type : CLEAR_REMINDER , \r\n\r\n    }\r\n    return action\r\n}","import { ADD_REMINDER , REMOVE_REMINDER ,CLEAR_REMINDER } from \"../types\";\r\n\r\nconst Reminders = (state=[] , action) => {\r\n    let reminders = null;\r\n\r\n    if(action.type === ADD_REMINDER ){\r\n        reminders = [...state , {text:action.text , date:action.date , id:Math.random()}]\r\n        console.log(\"from reducer\" , reminders)\r\n        return reminders\r\n    }\r\n    else if(action.type === REMOVE_REMINDER){\r\n        reminders = state.filter(reminder => reminder.id !== action.id)\r\n        return reminders\r\n    }else if(action.type === CLEAR_REMINDER){\r\n        reminders = []\r\n        return reminders\r\n    }\r\n    \r\n    else {\r\n        return state\r\n    }\r\n    \r\n}\r\n\r\nexport default Reminders\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reminders from './Reducers/Index'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst store = createStore(reminders)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}